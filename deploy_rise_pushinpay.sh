#!/usr/bin/env bash
# ============================================================
# RiseCheckout ‚Äî Deploy completo da integra√ß√£o PushinPay (PIX)
# Faz: valida ambiente, configura secrets, deploya fun√ß√µes
# Autor: plano consolidado (vers√£o final)
# ============================================================

set -euo pipefail

# ---------- CONFIGURA√á√ïES FIXAS DO PROJETO ----------
PROJECT_REF="wivbtmtgpsxupfjwwovf"                  # seu Supabase project ref
PLATFORM_PUSHINPAY_ACCOUNT_ID="9F73D854-4DA8-45E1-AFB6-9A8F803EFB7A"  # sua conta PushinPay (plataforma)
PLATFORM_FEE_PERCENT="7.5"                           # taxa da plataforma (em %)
PUSHINPAY_BASE_URL_PROD="https://api.pushinpay.com.br/api"
PUSHINPAY_BASE_URL_SANDBOX="https://api-sandbox.pushinpay.com.br/api"
PUSHINPAY_WEBHOOK_TOKEN="rise_secure_token_123"      # token que a PushinPay enviar√° no header x-pushinpay-token

echo "üöÄ DEPLOY COMPLETO ‚Äì Integra√ß√£o PushinPay (PIX)"
echo "Projeto: ${PROJECT_REF}"
echo "Conta plataforma (split): ${PLATFORM_PUSHINPAY_ACCOUNT_ID}"
echo "============================================================"
echo

# ---------- PR√â-CHECAGENS ----------
if [ ! -d "supabase/functions" ]; then
  echo "‚ùå Erro: Execute este script na RAIZ do reposit√≥rio (precisa de supabase/functions/)."
  exit 1
fi

if ! command -v supabase >/dev/null 2>&1; then
  echo "‚ùå Supabase CLI n√£o encontrado."
  echo "   Instale com: npm i -g supabase"
  exit 1
fi

if ! supabase projects list >/dev/null 2>&1; then
  echo "‚ùå Voc√™ n√£o est√° logado no Supabase CLI."
  echo "   Fa√ßa: supabase login"
  exit 1
fi

echo "‚úÖ Ambiente validado."
echo

# ---------- ETAPA 1: SECRETS ----------
echo "üì¶ 1/2 ‚Äì Configurando secrets no Supabase‚Ä¶"

# Gera uma chave forte de 32 bytes (Base64) para criptografia AES-256-GCM
ENCRYPTION_KEY=$(node -e "console.log(require('crypto').randomBytes(32).toString('base64'))")

# Configura as 6 secrets necess√°rias
supabase secrets set ENCRYPTION_KEY="${ENCRYPTION_KEY}" --project-ref "${PROJECT_REF}"
supabase secrets set PLATFORM_PUSHINPAY_ACCOUNT_ID="${PLATFORM_PUSHINPAY_ACCOUNT_ID}" --project-ref "${PROJECT_REF}"
supabase secrets set PLATFORM_FEE_PERCENT="${PLATFORM_FEE_PERCENT}" --project-ref "${PROJECT_REF}"
supabase secrets set PUSHINPAY_BASE_URL_PROD="${PUSHINPAY_BASE_URL_PROD}" --project-ref "${PROJECT_REF}"
supabase secrets set PUSHINPAY_BASE_URL_SANDBOX="${PUSHINPAY_BASE_URL_SANDBOX}" --project-ref "${PROJECT_REF}"
supabase secrets set PUSHINPAY_WEBHOOK_TOKEN="${PUSHINPAY_WEBHOOK_TOKEN}" --project-ref "${PROJECT_REF}"

echo "‚úÖ Secrets definidas."
echo

# ---------- ETAPA 2: DEPLOY DAS EDGE FUNCTIONS ----------
echo "üöÄ 2/2 ‚Äì Deploy das Edge Functions (ordem correta)‚Ä¶"
# As 3 usadas pelo frontend sem verifica√ß√£o de JWT:
echo " ‚Üí encrypt-token"
supabase functions deploy encrypt-token --no-verify-jwt --project-ref "${PROJECT_REF}"

echo " ‚Üí pushinpay-create-pix"
supabase functions deploy pushinpay-create-pix --no-verify-jwt --project-ref "${PROJECT_REF}"

echo " ‚Üí pushinpay-get-status"
supabase functions deploy pushinpay-get-status --no-verify-jwt --project-ref "${PROJECT_REF}"

# Webhook (server-to-server) COM verifica√ß√£o de JWT:
echo " ‚Üí pushinpay-webhook"
supabase functions deploy pushinpay-webhook --project-ref "${PROJECT_REF}"

echo
echo "‚úÖ Fun√ß√µes deployadas:"
supabase functions list --project-ref "${PROJECT_REF}" || true
echo

# ---------- INSTRU√á√ïES FINAIS ----------
echo "============================================================"
echo "‚úÖ DEPLOY CONCLU√çDO"
echo "============================================================"
echo
echo "üìç Configure o Webhook na PushinPay (produ√ß√£o e sandbox):"
echo "   URL: https://${PROJECT_REF}.supabase.co/functions/v1/pushinpay-webhook"
echo "   Token (x-pushinpay-token): ${PUSHINPAY_WEBHOOK_TOKEN}"
echo "   Eventos: pix.created, pix.paid, pix.expired, pix.canceled"
echo
echo "üß™ Teste r√°pido (criptografia) ‚Äì Execute no terminal ap√≥s copiar seu ANON KEY:"
echo '   curl -X POST "https://'"${PROJECT_REF}"'.supabase.co/functions/v1/encrypt-token" \'
echo '     -H "Content-Type: application/json" \'
echo '     -H "apikey: <COLE_SUA_SUPABASE_ANON_KEY_AQUI>" \'
echo "     -d '{\"token\":\"token_teste_123\"}'"
echo "   ‚Üí Esperado: {\"encrypted\":\"...\"}"
echo
echo "üß™ Teste no app:"
echo "   1) Acesse /financeiro, cole o token Sandbox/Prod da PushinPay e salve."
echo "   2) Gere um PIX ‚â• R$ 0,50; a imagem base64 do QR deve aparecer."
echo "   3) No painel da PushinPay (Sandbox), simule o pagamento."
echo "   4) Verifique mudan√ßa de status via webhook (paid/expired/canceled)."
echo
echo "üîí Observa√ß√µes de seguran√ßa:"
echo "   ‚Ä¢ A taxa da plataforma √© calculada no backend (PLATFORM_FEE_PERCENT)."
echo "   ‚Ä¢ O vendedor n√£o v√™ nem altera a taxa (UI centralizada s√≥ para o dono)."
echo "   ‚Ä¢ O header 'Accept: application/json' j√° est√° no c√≥digo das functions."
echo
echo "üìö Refer√™ncias usadas neste consolidado:"
echo "   ‚Ä¢ Script base e comandos de secrets/deploy (de Manus/ChatGPT):"
echo "     ‚Äì deploy r√°pido + secrets + ordem de deploy. (vide documenta√ß√£o/artefatos internos)"
echo
echo "‚úÖ Pronto! Use este script sempre que precisar refazer o deploy end-to-end."
